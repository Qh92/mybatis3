<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qinh.dao.EmployeeMapper">
    <!--
        namespace:名称空间;指定为接口的全类名
        id：唯一标识
        resultType：返回值类型
        #{id}：从传递过来的参数中取出id值
        public Employee getEmpById(Integer id);
     -->

    <select id="getEmpByLastNameReturnMap" resultType="emp">
        select * from employee where last_name like #{lastName}
    </select>

    <select id="getEmpByIdReturnMap" resultType="map">
        select * from employee where id = #{id}
    </select>

    <!-- resultType:如果返回的是一个集合，要写集合中元素的类型 -->
    <select id="listEmpsByLastName" resultType="emp">
        select * from employee where last_name like #{lastName}
    </select>

    <select id="getEmpById2" resultType="emp" databaseId="mysql">
        select * from employee where id = #{list[0]}
    </select>

    <select id="getEmpById3" resultType="emp" databaseId="mysql">
        select * from employee where id = #{array[0]}
    </select>

    <select id="getEmpByMap" resultType="emp">
        select * from employee where id = #{id} and last_name = #{lastName}
    </select>

    <select id="getEmpByIdAndLastName" resultType="emp">
        select * from employee where id = #{id} and last_name = #{lastName}
    </select>

    <select id="getEmpById" resultType="emp" >
        select * from employee where id = #{id}
    </select>

    <select id="getEmpById" resultType="emp" databaseId="mysql">
        select * from employee where id = #{abc}
    </select>

    <select id="getEmpById" resultType="emp" databaseId="oracle">
        select employee_id id,last_name lastName,email email from employees where employee_id = #{id}
    </select>

    <!-- parameterType：可以省略
        获取自增主键的值：
        mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGeneratedKeys()
        useGeneratedKeys="true",使用自增主键获取主键值策略
        keyProperty:指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javabean的哪个属性
    -->
    <insert id="addEmp" parameterType="com.qinh.entity.Employee" useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
        insert into employee(last_name,email,gender) values(#{lastName},#{email},#{gender})
    </insert>

    <!--
        Oracle不支持自增，Oracle使用序列来模拟自增
        每次插入的数据的主键是从序列中拿到的值，如何获取到这个值
    -->
    <insert id="addEmp" parameterType="com.qinh.entity.Employee"  databaseId="oracle">
        <!-- keyProperty:查出的主键值封装给javaBean的哪个属性
            order="BEFORE":当前sql在插入sql之前运行
                    AFTER:当前sql在插入sql之后运行
            resultType:查出的数据的返回值类型

            BEFORE运行顺序：
                先运行selectKey查询id的sql,查出id值封装给javaBean的id属性
                再运行插入的sql，就可以取出id属性对应的值
            AFTER运行顺序：
                先运行插入的sql（从序列中取出新值作为id）
                再运行selectKey查询id的sql
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="Integer">
            <!-- 编写查询主键的sql语句 -->
            <!-- BEFORE:-->
            select EMPLOYEE_SEQ.nextval from dual
            <!-- AFTER:
            select EMPLOYEE_SEQ.currval from dual
            -->
        </selectKey>
        <!--BEFORE:-->
        insert into employee(employee_id,last_name,email) values(#{id},#{lastName},#{email})
        <!--AFTER:
        insert into employee(employee_id,last_name,email) values(EMPLOYEE_SEQ.nextval,#{lastName},#{email})
        -->

    </insert>

    <update id="updateEmp" >
        update employee set last_name = #{lastName},email = #{email},gender = #{gender} where id = #{id}
    </update>

    <delete id="deleteEmpById">
        delete from employee where id = #{id}
    </delete>

    <select id="listEmployee" resultType="emp">
        select * from employee
    </select>
</mapper>