<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.qinh.dao.EmployeeMapperPlus">

    <!--
        自定义某个javaBean的封装规则
        type:自定义规则的java类型
        id:唯一id,方便引用
    -->
    <resultMap id="mySimpleEmp" type="com.qinh.entity.Employee">
        <!--
            指定主键列的封装规则
            id定义主键底层会优化
            column:指定哪一列
            property:指定对应的javaBean属性
        -->
        <id column="id" property="id"/>
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName"/>
        <!-- 其它不指定的列会自动封装，我们只要写resultMap就把全部的映射规则都写上 -->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>


    <!-- resultMap:自定义结果集映射规则 -->
    <select id="getEmpById" resultMap="mySimpleEmp">
        select * from employee where id = #{id}
    </select>

    <!--
        场景一:
            查询Employee的同时查询员工对应的部门
            Employee===Department
            一个员工有与之对应的部门信息:
            id last_name gender dept_id d_id dept_name
    -->
    <!--
        联合查询：级联属性封装结果集
    -->
    <resultMap id="myDifEmp" type="com.qinh.entity.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="d_id" property="dept.id"/>
        <result column="dept_name" property="dept.departmentName"/>
    </resultMap>

    <!-- 使用association定义关联单个对象的封装规则 -->
    <resultMap id="myDifEmp2" type="com.qinh.entity.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--
            association可以指定联合的javaBean对象
            property="dept"(Employee中声明的dept属性)，指定哪个属性是联合的对象
            javaType:指定这个属性对象的类型(不能省略)
        -->
        <association property="dept" javaType="com.qinh.entity.Department">
            <id column="d_id" property="id"/>
            <result column="dept_name" property="departmentName"/>
        </association>
    </resultMap>

    <select id="getEmpAndDept" resultMap="myDifEmp2">
        select
            e.id id ,e.last_name last_name,e.gender gender,e.email email , e.dept_id dept_id , d.id d_id , d.dept_name dept_name
        from employee e,dept d
        where e.dept_id = d.id
        and e.id = #{id}
    </select>

    <!--
        使用association 进行分步查询
        1.先按照员工id查询员工信息
        2.根据查询员工信息中的dept_id值去部门表查询出部门信息
        3.部门信息设置到员工信息中
    -->
    <resultMap id="myEmpByStep" type="com.qinh.entity.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--
            association定义关联对象的封装规则
            select:表明当前属性是调用select指定的方法查出的结果
            column:指定将哪一列的值传给这个方法

            流程:使用select指定的方法(传入column指定的这列参数的值)查出对象，并封装给property指定的属性
        -->
        <association property="dept" select="com.qinh.dao.DepartmentMapper.getDeptById" column="dept_id">
        </association>
    </resultMap>
    <select id="getEmpByIdStep" resultMap="myEmpByStep">
        select * from employee where id = #{id}
    </select>

    <!--
        可以使用延迟加载(懒加载)：(按需加载)
        Employee===>Dept
            每次查询Employee对象的时候，都将一起查询出来
            部门信息在我们使用的时候再去查询
            分步查询的基础之上加上两个配置就可以实现
    -->

</mapper>